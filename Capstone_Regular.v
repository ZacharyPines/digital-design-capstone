/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module Capstone_Regular (
  input D,
  input V,
  input Clock,
  output L,
  output M
);
  wire s0;
  wire A;
  wire s1;
  wire s2;
  wire B;
  wire L_temp;
  wire s3;
  wire C;
  assign s2 = ((s1 & C & D) | V);
  assign s3 = ((A & B) | (s1 & L_temp & C) | D | V);
  // B
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s2 ),
    .C( Clock ),
    .Q( B ),
    .\~Q ( L_temp )
  );
  // C
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s3 ),
    .C( Clock ),
    .Q( C ),
    .\~Q ( M )
  );
  assign s0 = ((A & B) | (s1 & L_temp & C));
  // A
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s0 ),
    .C( Clock ),
    .Q( A ),
    .\~Q ( s1 )
  );
  assign L = L_temp;
endmodule
